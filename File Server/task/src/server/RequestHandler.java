package server;

import java.io.IOException;
import java.io.Serializable;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

/**
 * Business logic of file server.
 * Handle requests GET, PUT, DELETE and generate response.
 */
public class RequestHandler implements Serializable {
    private static final long serialVersionUID = 17L;

    private String PATH;
    private final Map<Long, String> fileList;
    private volatile long currentID;

    public RequestHandler() {
        fileList = Collections.synchronizedMap(new HashMap<>());
    }

    public void setPATH(String path) {
        this.PATH = path;
    }

    public Response handleRequest(Request request) {
        Response response = null;
        switch (request.getType()) {
            case PUT:
                response = put(request);
                break;
            case GET:
                response = get(request);
                break;
            case DELETE:
                response = delete(request);
                break;
            case EXIT:
                response = new Response();
                response.setCode(200);
                break;
            default:
                break;
        }
        return response;
    }

    private Response put(Request request) {
        String fileName = request.getFileName();
        byte[] fileData = request.getFileData();

        long id = getNextID();
        if (fileName.isEmpty()) {
            fileName = generateFileName(id);
        }
        String filePath = PATH + fileName;
        Response response = new Response();
        response.setCode(403);
        if (!FileUtils.isExist(filePath)) {
            try {
                FileUtils.write(filePath, fileData);

                fileList.put(id, fileName);
                response.setCode(200);
                response.setId(id);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return response;
    }

    private Response get(Request request) {
        String fileName = request.getFileName();
        long id = request.getFileId();
        Response response = new Response();

        if (fileName.isEmpty()) {
            fileName = fileList.get(id);
            if (fileName == null) {
                response.setCode(404);
                return response;
            }
        }

        String filePathName = PATH + fileName;
        if (FileUtils.isExist(filePathName)) {
            try {
                byte[] fileData = FileUtils.read(filePathName);
                response.setCode(200);
                response.setData(fileData);
            } catch (IOException e) {
                response.setCode(404);
            }
        } else {
            response.setCode(404);
        }
        return response;
    }

    private Response delete(Request request) {
        String fileName = request.getFileName();
        long id = request.getFileId();
        Response response = new Response();

        if (fileName.isEmpty()) {
            fileName = fileList.get(id);
            if (fileName == null) {
                response.setCode(404);
                return response;
            }
        }

        String filePath = PATH + fileName;
        if (FileUtils.isExist(filePath)) {
            try {
                FileUtils.delete(filePath);
                response.setCode(200);
            } catch (IOException e) {
                response.setCode(404);
            }
        } else {
            response.setCode(404);
        }
        return response;
    }

    private synchronized long getNextID() {
        return ++currentID;
    }

    private String generateFileName(long id) {
        return "autogenerated-" + id;
    }
}
